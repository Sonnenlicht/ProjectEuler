#Cyclical figurate numbers
#Problem 61
#Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:

#Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
#Square	 	P4,n=n2	 	1, 4, 9, 16, 25, ...
#Pentagonal	 	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
#Hexagonal	 	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
#Heptagonal	 	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
#Octagonal	 	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...
#The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

#The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
#Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
#This is the only set of 4-digit numbers with this property.
#Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.

tri_list = []
sqr_list = []
pent_list = []
hex_list = []
hept_list = []
oct_list = []

num = 1
tri_num = 1
while tri_num < 10000:
    tri_num = num * (num + 1) / 2
    tri_num = int(tri_num)
    if tri_num >= 1000 and tri_num < 10000:
        tri_str = str(tri_num)
        if tri_str[2] != '0':
            tri_list.append((3, tri_num))
    num += 1

num = 1
sqr_num = 1
while sqr_num < 10000:
    sqr_num = num * num
    sqr_num = int(sqr_num)
    if sqr_num >= 1000 and sqr_num < 10000:
        sqr_str = str(sqr_num)
        if sqr_str[2] != '0':
            sqr_list.append((4, sqr_num))
    num += 1

num = 1
pent_num = 1
while pent_num < 10000:
    pent_num = num * (3 * num - 1) / 2
    pent_num = int(pent_num)
    if pent_num >= 1000 and pent_num < 10000:
        pent_str = str(pent_num)
        if pent_str[2] != '0':
            pent_list.append((5, pent_num))
    num += 1

num = 1
hex_num = 1
while hex_num < 10000:
    hex_num = num * (2 * num - 1) 
    hex_num = int(hex_num)
    if hex_num >= 1000 and hex_num < 10000:
        hex_str = str(hex_num)
        if hex_str[2] != '0':
            hex_list.append((6, hex_num))
    num += 1

num = 1
hept_num = 1
while hept_num < 10000:
    hept_num = num * (5 * num - 3) / 2 
    hept_num = int(hept_num)
    if hept_num >= 1000 and hept_num < 10000:
        hept_str = str(hept_num)
        if hept_str[2] != '0':
            hept_list.append((7, hept_num))
    num += 1

num = 1
oct_num = 1
while oct_num < 10000:
    oct_num = num * (3 * num - 2) 
    oct_num = int(oct_num)
    if oct_num >= 1000 and oct_num < 10000:
        oct_str = str(oct_num)
        if oct_str[2] != '0':
            oct_list.append((8, oct_num))
    num += 1

tri_dict = {}
sqr_dict = {}
pent_dict = {}
hex_dict = {}
hept_dict = {}
oct_dict = {}

for tri_tuple in tri_list:
    tri_dict[tri_tuple] = []

for tri_tuple in tri_list:
    tristr = str(tri_tuple[1])
    for sqr_tuple in sqr_list:
        sqrstr = str(sqr_tuple[1])
        if tristr[2:] == sqrstr[0:2]:
            tri_dict[tri_tuple].append(sqr_tuple)
    for pent_tuple in pent_list:
        pentstr = str(pent_tuple[1])
        if tristr[2:] == pentstr[0:2]:
            tri_dict[tri_tuple].append(pent_tuple)
    for hex_tuple in hex_list:
        hexstr = str(hex_tuple[1])
        if tristr[2:] == hexstr[0:2]:
            tri_dict[tri_tuple].append(hex_tuple)
    for hept_tuple in hept_list:
        heptstr = str(hept_tuple[1])
        if tristr[2:] == heptstr[0:2]:
            tri_dict[tri_tuple].append(hept_tuple)
    for oct_tuple in oct_list:
        octstr = str(oct_tuple[1])
        if tristr[2:] == octstr[0:2]:
            tri_dict[tri_tuple].append(oct_tuple)

for sqr_tuple in sqr_list:
    sqr_dict[sqr_tuple] = []

for sqr_tuple in sqr_list:
    sqrstr = str(sqr_tuple[1])
    for tri_tuple in tri_list:
        tristr = str(tri_tuple[1])
        if sqrstr[2:] == tristr[0:2]:
            sqr_dict[sqr_tuple].append(tri_tuple)
    for pent_tuple in pent_list:
        pentstr = str(pent_tuple[1])
        if sqrstr[2:] == pentstr[0:2]:
            sqr_dict[sqr_tuple].append(pent_tuple)
    for hex_tuple in hex_list:
        hexstr = str(hex_tuple[1])
        if sqrstr[2:] == hexstr[0:2]:
            sqr_dict[sqr_tuple].append(hex_tuple)
    for hept_tuple in hept_list:
        heptstr = str(hept_tuple[1])
        if sqrstr[2:] == heptstr[0:2]:
            sqr_dict[sqr_tuple].append(hept_tuple)
    for oct_tuple in oct_list:
        octstr = str(oct_tuple[1])
        if sqrstr[2:] == octstr[0:2]:
            sqr_dict[sqr_tuple].append(oct_tuple)
            
for pent_tuple in pent_list:
    pent_dict[pent_tuple] = []

for pent_tuple in pent_list:
    pentstr = str(pent_tuple[1])
    for tri_tuple in tri_list:
        tristr = str(tri_tuple[1])
        if pentstr[2:] == tristr[0:2]:
            pent_dict[pent_tuple].append(tri_tuple)
    for sqr_tuple in sqr_list:
        sqrstr = str(sqr_tuple[1])
        if pentstr[2:] == sqrstr[0:2]:
            pent_dict[pent_tuple].append(sqr_tuple)
    for hex_tuple in hex_list:
        hexstr = str(hex_tuple[1])
        if pentstr[2:] == hexstr[0:2]:
            pent_dict[pent_tuple].append(hex_tuple)
    for hept_tuple in hept_list:
        heptstr = str(hept_tuple[1])
        if pentstr[2:] == heptstr[0:2]:
            pent_dict[pent_tuple].append(hept_tuple)
    for oct_tuple in oct_list:
        octstr = str(oct_tuple[1])
        if pentstr[2:] == octstr[0:2]:
            pent_dict[pent_tuple].append(oct_tuple)

for hex_tuple in hex_list:
    hex_dict[hex_tuple] = []

for hex_tuple in hex_list:
    hexstr = str(hex_tuple[1])
    for tri_tuple in tri_list:
        tristr = str(tri_tuple[1])
        if hexstr[2:] == tristr[0:2]:
            hex_dict[hex_tuple].append(tri_tuple)
    for sqr_tuple in sqr_list:
        sqrstr = str(sqr_tuple[1])
        if hexstr[2:] == sqrstr[0:2]:
            hex_dict[hex_tuple].append(sqr_tuple)
    for hept_tuple in hept_list:
        heptstr = str(hept_tuple[1])
        if hexstr[2:] == heptstr[0:2]:
            hex_dict[hex_tuple].append(hept_tuple)
    for pent_tuple in pent_list:
        pentstr = str(pent_tuple[1])
        if hexstr[2:] == pentstr[0:2]:
            hex_dict[hex_tuple].append(pent_tuple)
    for oct_tuple in oct_list:
        octstr = str(oct_tuple[1])
        if hexstr[2:] == octstr[0:2]:
            hex_dict[hex_tuple].append(oct_tuple)

for hept_tuple in hept_list:
    hept_dict[hept_tuple] = []

for hept_tuple in hept_list:
    heptstr = str(hept_tuple[1])
    for tri_tuple in tri_list:
        tristr = str(tri_tuple[1])
        if heptstr[2:] == tristr[0:2]:
            hept_dict[hept_tuple].append(tri_tuple)
    for sqr_tuple in sqr_list:
        sqrstr = str(sqr_tuple[1])
        if heptstr[2:] == sqrstr[0:2]:
            hept_dict[hept_tuple].append(sqr_tuple)
    for hex_tuple in hex_list:
        hexstr = str(hex_tuple[1])
        if heptstr[2:] == hexstr[0:2]:
            hept_dict[hept_tuple].append(hex_tuple)
    for pent_tuple in pent_list:
        pentstr = str(pent_tuple[1])
        if heptstr[2:] == pentstr[0:2]:
            hept_dict[hept_tuple].append(pent_tuple)
    for oct_tuple in oct_list:
        octstr = str(oct_tuple[1])
        if heptstr[2:] == octstr[0:2]:
            hept_dict[hept_tuple].append(oct_tuple)

for oct_tuple in oct_list:
    oct_dict[oct_tuple] = []

for oct_tuple in oct_list:
    octstr = str(oct_tuple[1])
    for tri_tuple in tri_list:
        tristr = str(tri_tuple[1])
        if octstr[2:] == tristr[0:2]:
            oct_dict[oct_tuple].append(tri_tuple)
    for sqr_tuple in sqr_list:
        sqrstr = str(sqr_tuple[1])
        if octstr[2:] == sqrstr[0:2]:
            oct_dict[oct_tuple].append(sqr_tuple)
    for hex_tuple in hex_list:
        hexstr = str(hex_tuple[1])
        if octstr[2:] == hexstr[0:2]:
            oct_dict[oct_tuple].append(hex_tuple)
    for pent_tuple in pent_list:
        pentstr = str(pent_tuple[1])
        if octstr[2:] == pentstr[0:2]:
            oct_dict[oct_tuple].append(pent_tuple)
    for hept_tuple in hept_list:
        heptstr = str(hept_tuple[1])
        if octstr[2:] == heptstr[0:2]:
            oct_dict[oct_tuple].append(hept_tuple)

all_dict = {}
all_dict.update(tri_dict)
all_dict.update(sqr_dict)
all_dict.update(pent_dict)
all_dict.update(hex_dict)
all_dict.update(hept_dict)
all_dict.update(oct_dict)

def total(link_list):
    total = 0
    for items in link_list:
        total += items[1]
    return total

cycle_list = []
key_list = []

def cycle(tuple_key, list_val):
    cycle_list.append(tuple_key)
    if tuple_key[0] not in key_list:
        key_list.append(tuple_key[0])
    for item in list_val:
        if len(cycle_list) < 6:
            if item[0] not in key_list:
                key_list.append(item[0])
                cycle(item, all_dict[item])
        else:
            if (cycle_list[5][1] % 100) ==  (cycle_list[0][1] // 100):
                print(cycle_list, total(cycle_list))
            del key_list[-1]
            del cycle_list[-1]
            return
    if len(cycle_list) > 1:
        del key_list[-1]
        del cycle_list[-1]
    return

for key in oct_list:
    cycle(key, all_dict[key])
    cycle_list = []
    key_list = []
    
        


        

